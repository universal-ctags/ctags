A	input.rs	/^pub struct A$/;"	s
Animal	input.rs	/^enum Animal {$/;"	g
B	input.rs	/^pub struct B$/;"	s
Bar	input.rs	/^struct Bar(isize);$/;"	s
Baz	input.rs	/^struct Baz(isize);$/;"	s
C	input.rs	/^impl<T> D<T> for C<T> where T: Send$/;"	c	inherits:D	end:42
C	input.rs	/^pub struct C<T> where T: Send$/;"	s
D	input.rs	/^pub trait D<T> where T: Send$/;"	i
DoZ	input.rs	/^trait DoZ {$/;"	i
Foo	input.rs	/^impl DoZ for Foo {$/;"	c	inherits:DoZ	end:157
Foo	input.rs	/^impl Foo {$/;"	c	end:120
Foo	input.rs	/^impl Testable for Foo {$/;"	c	inherits:Testable	end:151
Foo	input.rs	/^struct Foo{foo_field_1:isize}$/;"	s
Foo2	input.rs	/^struct Foo2 {$/;"	s
N	input.rs	/^const N: usize = 10;$/;"	C
ParametrizedTrait	input.rs	/^trait ParametrizedTrait<T> {$/;"	i
S1	input.rs	/^struct S1 {$/;"	s
SomeStruct	input.rs	/^	pub struct SomeStruct;$/;"	s	module:test_input2
SuperTraitTest	input.rs	/^trait SuperTraitTest:Testable+DoZ {$/;"	i
Testable	input.rs	/^trait Testable $/;"	i
TraitedStructTest	input.rs	/^impl<T: Clone> ParametrizedTrait<T> for TraitedStructTest<T> {$/;"	c	inherits:ParametrizedTrait	end:182
TraitedStructTest	input.rs	/^struct TraitedStructTest<X> {$/;"	s
a	input.rs	/^	a: T$/;"	m	struct:C
a_anteater	input.rs	/^	a_anteater(isize),$/;"	e	enum:Animal
a_bear	input.rs	/^	a_bear(isize),$/;"	e	enum:Animal
a_cat	input.rs	/^	a_cat(isize),$/;"	e	enum:Animal
a_dog	input.rs	/^	a_dog(isize),$/;"	e	enum:Animal
array_param	input.rs	/^fn array_param(arr: [[u32; 3]; 4])$/;"	f	signature:(arr: [[u32; 3]; 4])
bar	input.rs	/^	bar: isize$/;"	m	struct:A
bar	input.rs	/^	bar: isize$/;"	m	struct:B
do_z	input.rs	/^	fn do_z(&self) {$/;"	P	implementation:Foo	signature:(&self)
do_z	input.rs	/^	fn do_z(&self);$/;"	P	interface:DoZ	signature:(&self)
foo	input.rs	/^	foo: fn() -> isize,$/;"	m	struct:A
foo	input.rs	/^	foo: isize,$/;"	m	struct:B
foo_field_1	input.rs	/^struct Foo{foo_field_1:isize}$/;"	m	struct:Foo
gfunc	input.rs	/^fn gfunc<X:Testable+DoZ>(x:&X) {$/;"	f	signature:<X:Testable+DoZ>(x:&X)
ignore	input.rs	/^macro_rules! ignore {($($x:tt)*) => (())}$/;"	M
lifetime_and_char	input.rs	/^fn lifetime_and_char<'lifetime>(_: &'lifetime isize)$/;"	f	signature:<'lifetime>(_: &'lifetime isize)
main	input.rs	/^fn main() {	$/;"	f	signature:()
my_method	input.rs	/^	fn my_method(&self,_:isize){ println!("{}", "my_method of foo");}$/;"	P	implementation:Foo	signature:(&self,_:isize)
nested	input.rs	/^	fn nested() {}$/;"	f	function:main	signature:()
not_hidden_by_char	input.rs	/^	fn not_hidden_by_char() {}$/;"	f	function:lifetime_and_char	signature:()
only_field	input.rs	/^	only_field: [isize; size]$/;"	m	struct:S1
preserve_string_delims	input.rs	/^fn preserve_string_delims(_bar: extern r#"C"# fn()) {}$/;"	f	signature:(_bar: extern r#"C"# fn())
size	input.rs	/^static size: usize = 1;$/;"	v
some2	input.rs	/^fn some2(a:Animal) {$/;"	f	signature:(a:Animal)
test	input.rs	/^	fn test(&self) {$/;"	P	implementation:Foo	signature:(&self)
test	input.rs	/^	fn test(&self) {$/;"	P	implementation:TraitedStructTest	signature:(&self)
test	input.rs	/^	fn test(&self);$/;"	P	interface:ParametrizedTrait	signature:(&self)
test	input.rs	/^{	fn test(&self);$/;"	P	interface:Testable	signature:(&self)
test1	input.rs	/^	fn test1(&self) {$/;"	P	implementation:Foo	signature:(&self)
test1	input.rs	/^	fn test1(&self);$/;"	P	interface:Testable	signature:(&self)
test2	input.rs	/^	fn test2(&self) {$/;"	P	implementation:Foo	signature:(&self)
test2	input.rs	/^	fn test2(&self);$/;"	P	interface:Testable	signature:(&self)
test_input2	input.rs	/^mod test_input2$/;"	n
test_macro	input.rs	/^macro_rules! test_macro$/;"	M
where_foo	input.rs	/^pub fn where_foo<T>(a: T) where T: Send$/;"	f	signature:<T>(a: T) where T: Send
x	input.rs	/^		x:isize,$/;"	m	struct:Foo2
x	input.rs	/^	x:X$/;"	m	struct:TraitedStructTest
y	input.rs	/^		y:isize$/;"	m	struct:Foo2
yada	input.rs	/^fn yada(a:isize, c:Foo, b:test_input2::SomeStruct) -> String {$/;"	f	signature:(a:isize, c:Foo, b:test_input2::SomeStruct) -> String
